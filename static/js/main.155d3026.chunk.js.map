{"version":3,"sources":["utils/generator.ts","components/TextType.tsx","components/Header.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getRandomIndex","length","Math","round","random","defaultStructures","getRandomSentence","words","structure","mb","output","map","type","wordList","word","emoji","name","get","undefined","reduce","acc","curr","index","charAt","toUpperCase","substr","runOnce","Wrapper","styled","div","Type","span","TextType","props","handleChange","value","data-testid","role","onClick","WebFont","load","google","families","header","Heading","h1","Header","footer","Link","a","SocialList","ul","SocialItem","li","Footer","icon","faUser","href","faGithub","faTwitter","pjson","version","Main","article","Floater","section","GenerateButton","button","ContentArea","Controls","TextArea","textarea","Number","input","attrs","count","setCount","min","max","InputWrapper","EmojiWaiter","App","useState","multi","setMulti","setOutput","init","setInit","onChange","e","parseInt","target","aria-label","className","mode","sentences","i","push","generateOutput","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.155d3026.chunk.js","sourcesContent":["import words from \"../files/words.json\";\nimport name from \"emoji-name-map\";\n\ninterface IWords {\n  [key: string]: string[];\n}\n\nconst getRandomIndex = (length: number) =>\n  Math.round(Math.random() * (length - 1));\n\nconst getRandomWord = (wordList: string[]): string => {\n  const randomIndex = getRandomIndex(wordList.length);\n  return wordList[randomIndex];\n};\n\nconst defaultStructures = [\n  [\"art\", \"adj\", \"noun\", \"verb\", \"art\", \"adj\", \"noun\"],\n  [\"art\", \"noun\", \"verb\", \"art\", \"adj\", \"noun\"],\n];\n\nconst upperFirst = (word: string): string =>\n  word.charAt(0).toUpperCase() + word.substr(1);\n\nconst getRandomSentence = (\n  words: IWords,\n  structure: Array<string>,\n  mb: boolean\n): string => {\n  const output = structure.map(type => {\n    const word = getRandomWord(words[type]);\n    if (mb) {\n      const emoji = name.get(word);\n      return emoji !== undefined ? emoji : word;\n    }\n    return word;\n  });\n  const length = output.length;\n  return output.reduce(\n    (acc, curr, index) =>\n      acc +\n      (index === 0 ? upperFirst(curr) : curr) +\n      (index === length - 1 ? \". \" : \" \"),\n    \"\"\n  );\n};\n\nconst runOnce = (mb: boolean) =>\n  getRandomSentence(words, defaultStructures[getRandomIndex(defaultStructures.length)], mb);\n\nexport default runOnce;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\ninterface IProps {\n  handleChange: (value: boolean) => void;\n  value: boolean;\n}\n\nconst Wrapper = styled.div`\n  display: inline-block;\n`;\n\nconst Type = styled.span`\n  color: #95a5a6;\n  cursor: pointer;\n  border-bottom: 1px solid #bdc3c7;\n  font-size: 1em;\n`;\n\nconst TextType = (props: IProps) => {\n  const { handleChange, value } = props;\n  return (\n    <Wrapper>\n      <Type\n        data-testid=\"typeToggle\"\n        role=\"presentation\"\n        onClick={() => handleChange(!value)}\n      >\n        {`${value ? \"Multibyte\" : \"Plain\"}`}\n      </Type>\n      <span> text</span>\n    </Wrapper>\n  );\n};\n\nexport default TextType;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Baloo Tamma:300,400,700', 'cursive']\n  }\n});\n\nconst Wrapper = styled.header`\n  padding: 5px;\n  background-color: #e74c3c;\n  text-align: center;\n  color: #ecf0f1;\n`;\n\nconst Heading = styled.h1`\n  padding: 0;\n  margin: 0;\n  font-family: 'Baloo Tamma';\n`;\n\nconst Header = () => (\n  <Wrapper>\n    <Heading>Loremoji Ipsum*</Heading>\n  </Wrapper>\n);\n\nexport default Header;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport pjson from \"../../package.json\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub, faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Wrapper = styled.footer`\n  background-color: #2c3e50;\n  padding: 5px;\n  text-align: center;\n  color: #7f8c8d;\n`;\n\nconst Link = styled.a`\n  &,\n  &:link,\n  &:visited {\n    text-decoration: none;\n    color: #7f8c8d;\n  }\n`;\n\nconst SocialList = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SocialItem = styled.li`\n  padding: 5px 10px;\n`;\n\nconst Footer = () => (\n  <Wrapper>\n    <div>\n      <SocialList>\n        <SocialItem>\n          <span>\n            <FontAwesomeIcon icon={faUser} /> Cameron Pavey\n          </span>\n        </SocialItem>\n        <SocialItem>\n          <Link href=\"https://github.com/cpave3\">\n            {\" \"}\n            <FontAwesomeIcon icon={faGithub} /> Github\n          </Link>\n        </SocialItem>\n        <SocialItem>\n          <Link href=\"https://twitter.com/cpave3\">\n            {\" \"}\n            <FontAwesomeIcon icon={faTwitter} /> Twitter\n          </Link>\n        </SocialItem>\n      </SocialList>\n    </div>\n    <div>\n      <small>* No actual lorem ipsum inlcuded</small>\n    </div>\n    <div>\n      <small>{`v${pjson.version}`}</small>\n    </div>\n  </Wrapper>\n);\n\nexport default Footer;\n","import React, { Component, useState } from \"react\";\n\nimport styled from \"styled-components\";\n\nimport runOnce from \"./utils/generator\";\n\nimport ContentType from \"./components/ContentType\";\nimport TextType from \"./components/TextType\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport WebFont from \"webfontloader\";\n\nWebFont.load({\n  google: {\n    families: [\"Muli:300,400,700\", \"sans-serif\"]\n  }\n});\n\nconst Main = styled.article`\n  display: flex;\n  margin: 5px;\n  flex-direction: column;\n  flex: 1;\n`;\n\nconst Floater = styled.div`\n  background-color: #3498db;\n  color: #ecf0f1;\n  border: none;\n  border-radius: 5px;\n  padding: 5px 10px;\n  margin-bottom: 20px;\n  position: relative;\n  font-weight: bold;\n  font-family: \"Muli\", sans-serif;\n  &::after {\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid #3498db;\n    position: absolute;\n    top: 95%;\n    left: 50%;\n    transform: translateX(-50%);\n    content: \"\";\n  }\n\n  animation: float 6s ease-in-out infinite;\n  @keyframes float {\n    0% {\n      /* box-shadow: 0 5px 15px 0px rgba(0, 0, 0, 0.6); */\n      transform: translatey(0px);\n    }\n    50% {\n      /* box-shadow: 0 25px 15px 0px rgba(0, 0, 0, 0.2); */\n      transform: translatey(-5px);\n    }\n    100% {\n      /* box-shadow: 0 5px 15px 0px rgba(0, 0, 0, 0.6); */\n      transform: translatey(0px);\n    }\n  }\n`;\n\nconst generateOutput = (\n  count: number,\n  mode: string,\n  multi: boolean,\n  setOutput: (value: string) => void,\n  setInit: (value: boolean) => void\n) => {\n  // First generate the right number of sentences\n  setInit(false);\n  const sentences = [];\n  const paraSize = 10;\n  for (let i = 0; i < count; i++) {\n    sentences.push(i > 0 && i % paraSize === 0 ? \"\\n\\r\" : runOnce(multi));\n  }\n\n  const stringified = sentences.reduce((acc, curr) => acc + curr, \"\");\n\n  setOutput(stringified);\n};\n\nconst Wrapper = styled.section`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst GenerateButton = styled.button`\n  padding: 15px 30px;\n  font-size: 1.2em;\n  background-color: #27ae60;\n  color: white;\n  border: none;\n  font-weight: bold;\n  font-family: \"Muli\", sans-serif;\n  border-radius: 5px;\n  &:hover {\n    cursor: pointer;\n    background-color: #2ecc71;\n  }\n`;\n\nconst ContentArea = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10px 0;\n`;\n\nconst Controls = styled.div`\n  padding: 10px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-content: center;\n`;\n\nconst TextArea = styled.textarea`\n  flex: 1;\n  border: 1px solid #bdc3c7;\n  font-size: 1.15em;\n  font-family: \"Muli\", sans-serif;\n  box-sizing: border-box;\n  min-width: 100%;\n  max-width: 100%;\n`;\n\nconst Number = styled.input.attrs(\n  (count: number, setCount: (value: number) => void) => ({\n    type: \"number\",\n    min: 1,\n    max: 100\n  })\n)`\n  text-align: center;\n  width: 30px;\n  margin: 0 10px;\n  border: none;\n  border-bottom: 1px solid #bdc3c7;\n  color: #95a5a6;\n  font-size: 1em;\n  -moz-appearance: textfield;\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nconst InputWrapper = styled.section`\n  flex: 1;\n  display: flex;\n  position: relative;\n  flex-direction: column;\n`;\n\nconst EmojiWaiter = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 2rem;\n  opacity: 0.1;\n  > p {\n    font-size: 1.2rem;\n    font-weight: bold;\n  }\n`;\n\nconst App = () => {\n  const [multi, setMulti] = useState(true);\n  const [content, setContent] = useState(\"paragraph\");\n  const [count, setCount] = useState(20);\n  const [output, setOutput] = useState(\"\");\n  const [init, setInit] = useState(true);\n  return (\n    <Wrapper>\n      <Header />\n      <Main>\n        <Controls>\n          <span>Generate</span>\n          <Number\n            data-testid=\"lineCount\"\n            value={count}\n            onChange={e => setCount(parseInt(e.target.value))}\n          />\n          <span>&nbsp;{count === 1 ? \"sentence\" : \"sentences\"} of&nbsp;</span>\n          <TextType\n            handleChange={(value: boolean) => setMulti(value)}\n            value={multi}\n          />\n        </Controls>\n        <InputWrapper>\n          {init && (\n            <EmojiWaiter>\n              <span role=\"img\" aria-label=\"Thinking Emoji\">\n                🤔\n              </span>\n              <p>What are you waiting for?</p>\n            </EmojiWaiter>\n          )}\n          <TextArea\n            data-testid=\"output\"\n            className=\"border flex-1\"\n            value={output}\n          />\n        </InputWrapper>\n        <ContentArea>\n          {init ? (\n            <Floater data-testid=\"floater\">Click here to get started!</Floater>\n          ) : null}\n          <GenerateButton\n            data-testid=\"generateButton\"\n            onClick={() => {\n              generateOutput(count, content, multi, setOutput, setInit);\n            }}\n          >\n            Generate\n          </GenerateButton>\n        </ContentArea>\n      </Main>\n      <Footer />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}